// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sns.proto

#include "sns.pb.h"
#include "sns.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace csce438 {

static const char* SNSService_method_names[] = {
  "/csce438.SNSService/Login",
  "/csce438.SNSService/List",
  "/csce438.SNSService/Follow",
  "/csce438.SNSService/UnFollow",
  "/csce438.SNSService/KeepAlive",
  "/csce438.SNSService/GetAvailable",
  "/csce438.SNSService/Election",
  "/csce438.SNSService/Timeline",
};

std::unique_ptr< SNSService::Stub> SNSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SNSService::Stub> stub(new SNSService::Stub(channel));
  return stub;
}

SNSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(SNSService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(SNSService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Follow_(SNSService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnFollow_(SNSService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KeepAlive_(SNSService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAvailable_(SNSService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Election_(SNSService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Timeline_(SNSService_method_names[7], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status SNSService::Stub::Login(::grpc::ClientContext* context, const ::csce438::Request& request, ::csce438::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Reply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Reply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status SNSService::Stub::List(::grpc::ClientContext* context, const ::csce438::Request& request, ::csce438::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::csce438::ListReply>* SNSService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csce438::ListReply>* SNSService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status SNSService::Stub::Follow(::grpc::ClientContext* context, const ::csce438::Request& request, ::csce438::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Follow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Reply>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Reply>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, false);
}

::grpc::Status SNSService::Stub::UnFollow(::grpc::ClientContext* context, const ::csce438::Request& request, ::csce438::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnFollow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::AsyncUnFollowRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Reply>::Create(channel_.get(), cq, rpcmethod_UnFollow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::PrepareAsyncUnFollowRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Reply>::Create(channel_.get(), cq, rpcmethod_UnFollow_, context, request, false);
}

::grpc::Status SNSService::Stub::KeepAlive(::grpc::ClientContext* context, const ::csce438::Alive& request, ::csce438::Alive* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KeepAlive_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::csce438::Alive>* SNSService::Stub::AsyncKeepAliveRaw(::grpc::ClientContext* context, const ::csce438::Alive& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Alive>::Create(channel_.get(), cq, rpcmethod_KeepAlive_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csce438::Alive>* SNSService::Stub::PrepareAsyncKeepAliveRaw(::grpc::ClientContext* context, const ::csce438::Alive& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Alive>::Create(channel_.get(), cq, rpcmethod_KeepAlive_, context, request, false);
}

::grpc::Status SNSService::Stub::GetAvailable(::grpc::ClientContext* context, const ::csce438::Alive& request, ::csce438::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAvailable_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::AsyncGetAvailableRaw(::grpc::ClientContext* context, const ::csce438::Alive& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Reply>::Create(channel_.get(), cq, rpcmethod_GetAvailable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::PrepareAsyncGetAvailableRaw(::grpc::ClientContext* context, const ::csce438::Alive& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Reply>::Create(channel_.get(), cq, rpcmethod_GetAvailable_, context, request, false);
}

::grpc::Status SNSService::Stub::Election(::grpc::ClientContext* context, const ::csce438::Alive& request, ::csce438::Alive* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Election_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::csce438::Alive>* SNSService::Stub::AsyncElectionRaw(::grpc::ClientContext* context, const ::csce438::Alive& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Alive>::Create(channel_.get(), cq, rpcmethod_Election_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csce438::Alive>* SNSService::Stub::PrepareAsyncElectionRaw(::grpc::ClientContext* context, const ::csce438::Alive& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::csce438::Alive>::Create(channel_.get(), cq, rpcmethod_Election_, context, request, false);
}

::grpc::ClientReaderWriter< ::csce438::Message, ::csce438::Message>* SNSService::Stub::TimelineRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::csce438::Message, ::csce438::Message>::Create(channel_.get(), rpcmethod_Timeline_, context);
}

::grpc::ClientAsyncReaderWriter< ::csce438::Message, ::csce438::Message>* SNSService::Stub::AsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::csce438::Message, ::csce438::Message>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::csce438::Message, ::csce438::Message>* SNSService::Stub::PrepareAsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::csce438::Message, ::csce438::Message>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, false, nullptr);
}

SNSService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Request, ::csce438::Reply>(
          std::mem_fn(&SNSService::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Request, ::csce438::ListReply>(
          std::mem_fn(&SNSService::Service::List), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Request, ::csce438::Reply>(
          std::mem_fn(&SNSService::Service::Follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Request, ::csce438::Reply>(
          std::mem_fn(&SNSService::Service::UnFollow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Alive, ::csce438::Alive>(
          std::mem_fn(&SNSService::Service::KeepAlive), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Alive, ::csce438::Reply>(
          std::mem_fn(&SNSService::Service::GetAvailable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Alive, ::csce438::Alive>(
          std::mem_fn(&SNSService::Service::Election), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[7],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SNSService::Service, ::csce438::Message, ::csce438::Message>(
          std::mem_fn(&SNSService::Service::Timeline), this)));
}

SNSService::Service::~Service() {
}

::grpc::Status SNSService::Service::Login(::grpc::ServerContext* context, const ::csce438::Request* request, ::csce438::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::List(::grpc::ServerContext* context, const ::csce438::Request* request, ::csce438::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Follow(::grpc::ServerContext* context, const ::csce438::Request* request, ::csce438::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::UnFollow(::grpc::ServerContext* context, const ::csce438::Request* request, ::csce438::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::KeepAlive(::grpc::ServerContext* context, const ::csce438::Alive* request, ::csce438::Alive* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::GetAvailable(::grpc::ServerContext* context, const ::csce438::Alive* request, ::csce438::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Election(::grpc::ServerContext* context, const ::csce438::Alive* request, ::csce438::Alive* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::csce438::Message, ::csce438::Message>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csce438

