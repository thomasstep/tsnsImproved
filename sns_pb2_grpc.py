# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sns_pb2 as sns__pb2


class SNSServiceStub(object):
  """The messenger service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Login = channel.unary_unary(
        '/csce438.SNSService/Login',
        request_serializer=sns__pb2.Request.SerializeToString,
        response_deserializer=sns__pb2.Reply.FromString,
        )
    self.List = channel.unary_unary(
        '/csce438.SNSService/List',
        request_serializer=sns__pb2.Request.SerializeToString,
        response_deserializer=sns__pb2.ListReply.FromString,
        )
    self.Follow = channel.unary_unary(
        '/csce438.SNSService/Follow',
        request_serializer=sns__pb2.Request.SerializeToString,
        response_deserializer=sns__pb2.Reply.FromString,
        )
    self.UnFollow = channel.unary_unary(
        '/csce438.SNSService/UnFollow',
        request_serializer=sns__pb2.Request.SerializeToString,
        response_deserializer=sns__pb2.Reply.FromString,
        )
    self.KeepAlive = channel.unary_unary(
        '/csce438.SNSService/KeepAlive',
        request_serializer=sns__pb2.Alive.SerializeToString,
        response_deserializer=sns__pb2.Alive.FromString,
        )
    self.GetAvailable = channel.unary_unary(
        '/csce438.SNSService/GetAvailable',
        request_serializer=sns__pb2.Alive.SerializeToString,
        response_deserializer=sns__pb2.Reply.FromString,
        )
    self.Election = channel.unary_unary(
        '/csce438.SNSService/Election',
        request_serializer=sns__pb2.Alive.SerializeToString,
        response_deserializer=sns__pb2.Alive.FromString,
        )
    self.Timeline = channel.stream_stream(
        '/csce438.SNSService/Timeline',
        request_serializer=sns__pb2.Message.SerializeToString,
        response_deserializer=sns__pb2.Message.FromString,
        )


class SNSServiceServicer(object):
  """The messenger service definition.
  """

  def Login(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def List(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Follow(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UnFollow(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def KeepAlive(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAvailable(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Election(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Timeline(self, request_iterator, context):
    """Bidirectional streaming RPC
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SNSServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Login': grpc.unary_unary_rpc_method_handler(
          servicer.Login,
          request_deserializer=sns__pb2.Request.FromString,
          response_serializer=sns__pb2.Reply.SerializeToString,
      ),
      'List': grpc.unary_unary_rpc_method_handler(
          servicer.List,
          request_deserializer=sns__pb2.Request.FromString,
          response_serializer=sns__pb2.ListReply.SerializeToString,
      ),
      'Follow': grpc.unary_unary_rpc_method_handler(
          servicer.Follow,
          request_deserializer=sns__pb2.Request.FromString,
          response_serializer=sns__pb2.Reply.SerializeToString,
      ),
      'UnFollow': grpc.unary_unary_rpc_method_handler(
          servicer.UnFollow,
          request_deserializer=sns__pb2.Request.FromString,
          response_serializer=sns__pb2.Reply.SerializeToString,
      ),
      'KeepAlive': grpc.unary_unary_rpc_method_handler(
          servicer.KeepAlive,
          request_deserializer=sns__pb2.Alive.FromString,
          response_serializer=sns__pb2.Alive.SerializeToString,
      ),
      'GetAvailable': grpc.unary_unary_rpc_method_handler(
          servicer.GetAvailable,
          request_deserializer=sns__pb2.Alive.FromString,
          response_serializer=sns__pb2.Reply.SerializeToString,
      ),
      'Election': grpc.unary_unary_rpc_method_handler(
          servicer.Election,
          request_deserializer=sns__pb2.Alive.FromString,
          response_serializer=sns__pb2.Alive.SerializeToString,
      ),
      'Timeline': grpc.stream_stream_rpc_method_handler(
          servicer.Timeline,
          request_deserializer=sns__pb2.Message.FromString,
          response_serializer=sns__pb2.Message.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'csce438.SNSService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
